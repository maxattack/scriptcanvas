
$#include "Script.h"

typedef unsigned int ID;
typedef unsigned int uint32_t;

void ScriptUpdate @ paint();	

namespace SceneSystem {

	// SceneSystem Functions
	int NodeCount @ nodeCount();
	ID CreateNode @ createNode(ID parent=0);
	void AttachNode @ attachTo(ID parent, ID child);
	void DetachNode @ detach(ID child);
	ID Parent @ parentOf(ID node);
	void AddComponent @ addComponent(ID node, ID componentType);
	bool HasComponent @ hasComponent(ID node, ID componentType);
	void RemoveComponent @ removeComponent(ID node, ID componentType);
	void DestroyNode @ destroyNode(ID node);

	// SceneSystem Util Functions
	void GetPosition @ positionOf(ID node, float *x=0, float *y=0);
	void SetPosition @ setPosition(ID node, float x, float y);
	float GetRotation @ rotationOf(ID node);
	void SetRotation @ setRotation(ID node, float degrees);

}

namespace CircleSystem {
	
	void Create @ create(ID node, uint32_t color, float radius);
	void Destroy @ destroy(ID node);
	void Fill @ fill(ID node, uint32_t *color=0);
	void Radius @ radius(ID node, float *radius=0);
	void SetFill @ setFill(ID node, uint32_t fill);
	void SetRadius @ setRadius(ID node, float r);

};

namespace InputSystem {
	void GetMousePosition @ mousePosition(int *x=0, int *y=0);
	double GetTime @ seconds();
}

$[

scene = SceneSystem
circle = CircleSystem
input = InputSystem
component = {
	circle = 0
}
function import(ns)
	for key,value in pairs(ns) do
		_G[key] = value
	end
end

$]